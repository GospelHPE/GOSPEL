uiautomator.core
package com.android.uiautomator.core;

import java.lang.reflect.Method;

import android.accessibilityservice.AccessibilityServiceInfo;
import android.app.ActivityManager;
import android.app.ActivityManagerNative;
import android.app.IActivityController;
import android.app.IActivityManager;
import android.app.UiAutomation;
import android.app.UiAutomationConnection;
import android.content.Intent;
import android.os.HandlerThread;
import android.os.RemoteException;
import android.util.Log;

/**
 * @hide
 */
public class UiAutomationShellWrapper {
	private static final String LOG_TAG = UiAutomationShellWrapper.class
			.getSimpleName();

	private static final String HANDLER_THREAD_NAME = "UiAutomatorHandlerThread";

	private final HandlerThread mHandlerThread = new HandlerThread(
			HANDLER_THREAD_NAME);

	private UiAutomation mUiAutomation;

	public void connect() {
		Log.i("UiAutomationShellWrapper", "go to connect!!!!");
		if (mHandlerThread.isAlive()) {
			throw new IllegalStateException("Already connected!");
		}
		mHandlerThread.start();
		mUiAutomation = new UiAutomation(mHandlerThread.getLooper(),
				new UiAutomationConnection());
		mUiAutomation.connect();
	}

	/**
	 * 检查当前uiautomation是否已成功连接 抛异常则为当前未连接或已断连
	 * 
	 * @return true/false
	 * @author zWX235140 20160827
	 */
	public boolean isConnected() {
		Log.i(LOG_TAG, "invoke isConnected!");
		try {
			int id = mUiAutomation.getConnectionId();
			Log.i(LOG_TAG, "connected! id: " + id);
			return true;
		} catch (Exception e) {
			Log.e(LOG_TAG, "check isConnected error! " + e.getMessage());
			return false;
		}
	}

	/**
	 * Enable or disable monkey test mode.
	 * 
	 * Setting test as "monkey" indicates to some applications that a test
	 * framework is running as a "monkey" type. Such applications may choose not
	 * to perform actions that do submits so to avoid allowing monkey tests from
	 * doing harm or performing annoying actions such as dialing 911 or posting
	 * messages to public forums, etc.
	 * 
	 * @param isSet
	 *            True to set as monkey test. False to set as regular functional
	 *            test (default).
	 * @see {@link ActivityManager#isUserAMonkey()}
	 */
	public void setRunAsMonkey(boolean isSet) throws RemoteException {
		IActivityManager am = ActivityManagerNative.getDefault();
		if (am == null) {
			throw new RuntimeException(
					"Can't manage monkey status; is the system running?");
		}

		int version = UiDevice.getSdkVersion();
		Log.i("UiAutomationShellWrapper", "sdk version: " + version);
		/*
		 * 适配android 7.0 2016/5/5 zwx235140
		 */
		// begin
		try {
			// 直接调用方法的异常无法捕获，只能捕获反射的异常
			Method setActivityController = am.getClass().getDeclaredMethod(
					"setActivityController",
					new Class[] { IActivityController.class });
			setActivityController.setAccessible(true);
			if (isSet) {
				setActivityController.invoke(am,
						new Object[] { new DummyActivityController() });
			} else {
				setActivityController.invoke(am, new Object[] { null });
			}
		} catch (Exception e) {
			Log.e("UiAutomationShellWrapper",
					"invoke setActivityController faild! ERROR: "
							+ e.getMessage());
			if (isSet) {
				am.setActivityController(new DummyActivityController(), true);
			} else {
				am.setActivityController(null, true);
			}
		}
	}

	public void disconnect() {
		if (!mHandlerThread.isAlive()) {
			throw new IllegalStateException("Already disconnected!");
		}
		mUiAutomation.disconnect();
		mHandlerThread.quit();
	}

	public UiAutomation getUiAutomation() {
		return mUiAutomation;
	}

	public void setCompressedLayoutHierarchy(boolean compressed) {
		AccessibilityServiceInfo info = mUiAutomation.getServiceInfo();
		if (compressed)
			info.flags &= ~AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
		else
			info.flags |= AccessibilityServiceInfo.FLAG_INCLUDE_NOT_IMPORTANT_VIEWS;
		mUiAutomation.setServiceInfo(info);
	}

	/**
	 * Dummy, no interference, activity controller.
	 */
	private class DummyActivityController extends IActivityController.Stub {
		@Override
		public boolean activityStarting(Intent intent, String pkg)
				throws RemoteException {
			/* do nothing and let activity proceed normally */
			return true;
		}

		@Override
		public boolean activityResuming(String pkg) throws RemoteException {
			/* do nothing and let activity proceed normally */
			return true;
		}

		@Override
		public boolean appCrashed(String processName, int pid, String shortMsg,
				String longMsg, long timeMillis, String stackTrace)
				throws RemoteException {
			/* do nothing and let activity proceed normally */
			return true;
		}

		@Override
		public int appEarlyNotResponding(String processName, int pid,
				String annotation) throws RemoteException {
			/* do nothing and let activity proceed normally */
			return 0;
		}

		@Override
		public int appNotResponding(String processName, int pid,
				String processStats) throws RemoteException {
			/* do nothing and let activity proceed normally */
			return 0;
		}

		@Override
		public int systemNotResponding(String message) throws RemoteException {
			/* do nothing and let system proceed normally */
			return 0;
		}
	}
}
--------------------


/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.uiautomator.core;

import java.lang.reflect.Method;

import android.app.ActivityManagerNative;
import android.app.IActivityManager;
import android.app.IActivityManager.ContentProviderHolder;
import android.app.UiAutomation;
import android.content.Context;
import android.content.IContentProvider;
import android.database.Cursor;
import android.hardware.display.DisplayManagerGlobal;
import android.os.Binder;
import android.os.IBinder;
import android.os.IPowerManager;
import android.os.RemoteException;
import android.os.ServiceManager;
import android.os.UserHandle;
import android.provider.Settings;
import android.util.Log;
import android.view.Display;
import android.view.IWindowManager;

/**
 * @hide
 */
public class ShellUiAutomatorBridge extends UiAutomatorBridge {

	private static final String LOG_TAG = ShellUiAutomatorBridge.class
			.getSimpleName();

	public ShellUiAutomatorBridge(UiAutomation uiAutomation) {
		super(uiAutomation);
	}

	public Display getDefaultDisplay() {
		return DisplayManagerGlobal.getInstance().getRealDisplay(
				Display.DEFAULT_DISPLAY);
	}

	@SuppressWarnings("deprecation")
	public long getSystemLongPressTime() {
		// Read the long press timeout setting.
		long longPressTimeout = 0;
		try {
			IContentProvider provider = null;
			Cursor cursor = null;
			IActivityManager activityManager = ActivityManagerNative
					.getDefault();
			String providerName = Settings.Secure.CONTENT_URI.getAuthority();
			IBinder token = new Binder();
			try {
				ContentProviderHolder holder = activityManager
						.getContentProviderExternal(providerName,
								UserHandle.USER_OWNER, token);
				if (holder == null) {
					throw new IllegalStateException("Could not find provider: "
							+ providerName);
				}
				provider = holder.provider;
				cursor = provider.query(null, Settings.Secure.CONTENT_URI,
						new String[] { Settings.Secure.VALUE }, "name=?",
						new String[] { Settings.Secure.LONG_PRESS_TIMEOUT },
						null, null);
				if (cursor.moveToFirst()) {
					longPressTimeout = cursor.getInt(0);
				}
			} finally {
				if (cursor != null) {
					cursor.close();
				}
				if (provider != null) {
					activityManager.removeContentProviderExternal(providerName,
							token);
				}
			}
		} catch (RemoteException e) {
			String message = "Error reading long press timeout setting.";
			Log.e(LOG_TAG, message, e);
			throw new RuntimeException(message, e);
		}
		return longPressTimeout;
	}

	@Override
	public int getRotation() {
		IWindowManager wm = IWindowManager.Stub.asInterface(ServiceManager
				.getService(Context.WINDOW_SERVICE));
		int ret = -1;
		try {
			ret = wm.getRotation();
		} catch (RemoteException e) {
			Log.e(LOG_TAG, "Error getting screen rotation", e);
			throw new RuntimeException(e);
		}
		return ret;
	}

	@Override
	public boolean isScreenOn() {
		IPowerManager pm = IPowerManager.Stub.asInterface(ServiceManager
				.getService(Context.POWER_SERVICE));
		try {
			Method isScreenOn;
			if (UiDevice.getSdkVersion() >= 23) {
				// M
				Log.i(LOG_TAG, " invoke isInteractive!");
				isScreenOn = pm.getClass().getDeclaredMethod("isInteractive");
			} else {
				Log.i(LOG_TAG, " invoke isScreenOn!");
				isScreenOn = pm.getClass().getDeclaredMethod("isScreenOn");
			}

			return (Boolean) isScreenOn.invoke(pm);
		} catch (Exception e) {
			Log.e(LOG_TAG, "Error getting screen status", e);
			throw new RuntimeException(e);
		}
	}

}

----------------------



/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.uiautomator.core;

import android.app.Service;
import android.app.UiAutomation;
import android.content.Context;
import android.os.PowerManager;
import android.view.Display;
import android.view.ViewConfiguration;
import android.view.WindowManager;

/**
 * @hide
 */
public class InstrumentationUiAutomatorBridge extends UiAutomatorBridge {

    private final Context mContext;

    public InstrumentationUiAutomatorBridge(Context context, UiAutomation uiAutomation) {
        super(uiAutomation);
        mContext = context;
    }

    public Display getDefaultDisplay() {
        WindowManager windowManager = (WindowManager)
                mContext.getSystemService(Service.WINDOW_SERVICE);
        return windowManager.getDefaultDisplay();
    }

    @Override
    public int getRotation() {
        return getDefaultDisplay().getRotation();
    }

    @SuppressWarnings("deprecation")
	@Override
    public boolean isScreenOn() {
        PowerManager pm = (PowerManager)
                mContext.getSystemService(Service.POWER_SERVICE);
        return pm.isScreenOn();
    }

    public long getSystemLongPressTime() {
        return ViewConfiguration.getLongPressTimeout();
    }
}


-------------


package com.android.uiautomator.core;

import android.view.accessibility.AccessibilityEvent;

public abstract interface EventListener {

	public abstract void onAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent);
	
}


------------------
